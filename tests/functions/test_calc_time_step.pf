module test_calc_time_step
  
  use set_precision,    only : prec
  use fluid_constants,  only : gamma
  use time_integration, only : calc_time_step
  use set_inputs,       only : CFL, i_low,i_high,ig_low,ig_high
  use pfunit_mod
  
  implicit none
  
  real(prec), parameter :: toler = 1.0e-14_prec
  
  contains
  
  @test
    subroutine calc_time_step_test
      
      real(prec), dimension(1,1,4) :: V
      real(prec), dimension(1,1,2) :: n_xi_avg, n_eta_avg
      real(prec), dimension(1,1) :: A_xi, A_eta, vol
      real(prec), dimension(1,1) :: dt, dt_expected
      
      gamma = 1.4_prec
      CFL = 1.0_prec
      
      V(1,1,:) = (/ 2.0_prec, 264.0_prec, 0.0_prec, 100000.0_prec /)
      n_xi_avg(1,1,:)  = (/ 1.0_prec, 0.0_prec /)
      n_eta_avg(1,1,:) = (/ 0.0_prec, 1.0_prec /)
      A_xi  = 0.01_prec
      A_eta = 0.01_prec
      vol   = 0.001_prec
      
      dt_expected = 0.000126079514518468_prec
      
      call calc_time_step(A_xi,A_eta,n_xi_avg,n_eta_avg,vol,V,dt)
      
      write(*,*)
      write(*,*) 'dt            = ', dt
      write(*,*) 'dt_exp        = ', dt_expected
      @assertequal(1.0_prec,dt/dt_expected,toler)
      write(*,*) 'rel tol       = ', toler
      
    end subroutine calc_time_step_test

end module test_calc_time_step
