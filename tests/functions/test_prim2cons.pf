module test_prim2cons

  use set_precision,       only : prec
  use fluid_constants,     only : gamma
  use variable_conversion, only : prim2cons
  use pfunit_mod

  implicit none

  real(prec), parameter :: toler = 1.0e-14_prec

  contains

  @test
    subroutine prim2cons_test

      real(prec), dimension(1,1,4) :: U
      real(prec), dimension(1,1,4) :: U_expected
      real(prec), dimension(1,1,4) :: V
      
      gamma = 1.4_prec
      
      V(1,1,1) = 2.0_prec
      V(1,1,2) = 50.0_prec
      V(1,1,3) = 100.0_prec
      V(1,1,4) = 100000.0_prec

      U_expected(1,1,1) = 2.0_prec
      U_expected(1,1,2) = 100.0_prec
      U_expected(1,1,3) = 200.0_prec
      U_expected(1,1,4) = 262500.0_prec

      call prim2cons(U,V)

      write(*,*)
      write(*,*) 'U(1)     = ', U(1,1,1)
      write(*,*) 'U_exp(1) = ', U_expected(1,1,1)
      @assertequal(1.0_prec, U(1,1,1)/U_expected(1,1,1), toler, message='(mass)')
      write(*,*) 'U(2)     = ', U(1,1,2)
      write(*,*) 'U_exp(2) = ', U_expected(1,1,2)
      @assertequal(1.0_prec, U(1,1,2)/U_expected(1,1,2), toler, message='(x-mtm)')
      write(*,*) 'U(3)     = ', U(1,1,3)
      write(*,*) 'U_exp(3) = ', U_expected(1,1,3)
      @assertequal(1.0_prec, U(1,1,3)/U_expected(1,1,3), toler, message='(y-mtm)')
      write(*,*) 'U(4)     = ', U(1,1,4)
      write(*,*) 'U_exp(4) = ', U_expected(1,1,4)
      @assertequal(1.0_prec, U(1,1,4)/U_expected(1,1,4), toler, message='(energy)')
      write(*,*) 'rel tol  = ', toler
      
    end subroutine prim2cons_test

end module test_prim2cons
