module test_roe_flux

  use set_precision,   only : prec
  use fluid_constants, only : gamma
  use set_inputs, only : eps_Roe
  use flux_calc, only : flux_fun, select_flux
  use pfunit_mod

  implicit none

  real(prec), parameter :: toler = 1.0e-13_prec

  contains

  @test
    subroutine roe_subsonic_flux_test
      
      use set_inputs, only : flux_scheme
      
      real(prec), dimension(4) :: left, right
      real(prec), dimension(4) :: F_expected
      real(prec), dimension(4) :: F
      real(prec) :: nx, ny
      
      gamma = 1.4_prec
      eps_Roe = 0.05_prec
      nx = 0.99_prec
      ny = 0.141067359796659_prec
      
      flux_scheme = 2
      call select_flux()
      
      left  = (/ 2.0_prec, 100.0_prec, 50.0_prec, 100000.0_prec /)
      right = (/ 2.1_prec, 101.0_prec, 40.0_prec,  90000.0_prec /)
      
      F_expected(1) = 212.106735979666_prec
      F_expected(2) = 120210.673597967_prec
      F_expected(3) = 22555.8607596992_prec
      F_expected(4) = 38342072.6061922_prec
      
      call flux_fun(left,right,nx,ny,F)
      
      write(*,*)
      write(*,*) 'subsonic test case (Roe):'
      write(*,*) 'F(1)     = ', F(1)
      write(*,*) 'F_exp(1) = ', F_expected(1)
      @assertequal(1.0_prec,F(1)/F_expected(1), toler)
      write(*,*) 'F(2)     = ', F(2)
      write(*,*) 'F_exp(2) = ', F_expected(2)
      @assertequal(1.0_prec, F(2)/F_expected(2), toler)
      write(*,*) 'F(3)     = ', F(3)
      write(*,*) 'F_exp(3) = ', F_expected(3)
      @assertequal(1.0_prec,F(3)/F_expected(3), toler)
      write(*,*) 'F(4)     = ', F(4)
      write(*,*) 'F_exp(4) = ', F_expected(4)
      @assertequal(1.0_prec,F(4)/F_expected(4), toler)
      write(*,*) 'rel tol  = ', toler
      
    end subroutine roe_subsonic_flux_test
    
  @test
    subroutine roe_sonic_flux_test
      
      use set_inputs, only : flux_scheme
      
      real(prec), dimension(4) :: left, right
      real(prec), dimension(4) :: F_expected
      real(prec), dimension(4) :: F
      real(prec) :: nx, ny
      
      gamma = 1.4_prec
      eps_Roe = 0.05_prec
      nx = 1.0_prec
      ny = 0.0_prec
      
      flux_scheme = 2
      call select_flux()
      
      left  = (/ 2.0_prec, 264.0_prec, 0.0_prec, 100000.0_prec /)
      right = (/ 1.9_prec, 265.0_prec, 0.0_prec,  90000.0_prec /)
      
      F_expected(1) = 527.358351813775_prec
      F_expected(2) = 239389.832776208_prec
      F_expected(3) = 0.0_prec
      F_expected(4) = 110712243.184528_prec
      
      call flux_fun(left,right,nx,ny,F)
      
      write(*,*)
      write(*,*) 'sonic test case (Roe):'
      write(*,*) 'F(1)     = ', F(1)
      write(*,*) 'F_exp(1) = ', F_expected(1)
      @assertequal(1.0_prec,F(1)/F_expected(1), toler)
      write(*,*) 'F(2)     = ', F(2)
      write(*,*) 'F_exp(2) = ', F_expected(2)
      @assertequal(1.0_prec, F(2)/F_expected(2), toler)
      write(*,*) 'F(3)     = ', F(3)
      write(*,*) 'F_exp(3) = ', F_expected(3)
      @assertequal(F_expected(3),F(3), toler)
      write(*,*) 'F(4)     = ', F(4)
      write(*,*) 'F_exp(4) = ', F_expected(4)
      @assertequal(1.0_prec,F(4)/F_expected(4), toler)
      write(*,*) 'rel tol  = ', toler
      
    end subroutine roe_sonic_flux_test
    
  @test
    subroutine roe_supersonic_flux_test
      
      use set_inputs, only : flux_scheme
      
      real(prec), dimension(4) :: left, right
      real(prec), dimension(4) :: F_expected
      real(prec), dimension(4) :: F
      real(prec) :: nx, ny
      
      gamma = 1.4_prec
      eps_Roe = 0.05_prec
      nx = 0.99_prec
      ny = 0.141067359796659_prec
      
      flux_scheme = 2
      call select_flux()
      
      left  = (/ 2.0_prec, 1000.0_prec, 50.0_prec, 100000.0_prec /)
      right = (/ 2.1_prec,  800.0_prec, 40.0_prec,  90000.0_prec /)
      
      F_expected(1) = 2456.04599498267_prec
      F_expected(2) = 2391182.31577846_prec
      F_expected(3) = 151181.218775777_prec
      F_expected(4) = 1498155491.12444_prec
      
      call flux_fun(left,right,nx,ny,F)
      
      write(*,*)
      write(*,*) 'supersonic test case (Roe):'
      write(*,*) 'F(1)     = ', F(1)
      write(*,*) 'F_exp(1) = ', F_expected(1)
      @assertequal(1.0_prec,F(1)/F_expected(1), toler)
      write(*,*) 'F(2)     = ', F(2)
      write(*,*) 'F_exp(2) = ', F_expected(2)
      @assertequal(1.0_prec, F(2)/F_expected(2), toler)
      write(*,*) 'F(3)     = ', F(3)
      write(*,*) 'F_exp(3) = ', F_expected(3)
      @assertequal(1.0_prec,F(3)/F_expected(3), toler)
      write(*,*) 'F(4)     = ', F(4)
      write(*,*) 'F_exp(4) = ', F_expected(4)
      @assertequal(1.0_prec,F(4)/F_expected(4), toler)
      write(*,*) 'rel tol  = ', toler
      
    end subroutine roe_supersonic_flux_test

end module test_roe_flux
