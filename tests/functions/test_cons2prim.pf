module test_cons2prim

  use set_precision,   only : prec
  use fluid_constants, only : gamma
  use variable_conversion, only : cons2prim
  use pfunit_mod

  implicit none

  real(prec), parameter :: toler = 1.0e-14_prec

  contains

  @test
    subroutine cons2prim_test

      real(prec), dimension(1,1,4) :: U
      real(prec), dimension(1,1,4) :: V_expected
      real(prec), dimension(1,1,4) :: V
     
      gamma = 1.4_prec
       
      U(1,1,1) = 2.0_prec
      U(1,1,2) = 100.0_prec
      U(1,1,3) = 200.0_prec
      U(1,1,4) = 262500.0_prec

      

      V_expected(1,1,1) = 2.0_prec
      V_expected(1,1,2) = 50.0_prec
      V_expected(1,1,3) = 100.0_prec
      V_expected(1,1,4) = 100000.0_prec


      call cons2prim(U,V)

      write(*,*)
      write(*,*) 'V(1)     = ', V(1,1,1)
      write(*,*) 'V_exp(1) = ', V_expected(1,1,1)
      @assertequal(1.0_prec, V(1,1,1)/V_expected(1,1,1), toler, message='(density)')
      write(*,*) 'V(2)     = ', V(1,1,2)
      write(*,*) 'V_exp(2) = ', V_expected(1,1,2)
      @assertequal(1.0_prec, V(1,1,2)/V_expected(1,1,2), toler, message='(x-velocity)')
      write(*,*) 'V(3)     = ', V(1,1,3)
      write(*,*) 'V_exp(3) = ', V_expected(1,1,3)
      @assertequal(1.0_prec, V(1,1,3)/V_expected(1,1,3), toler, message='(y-velocity)')
      write(*,*) 'V(4)     = ', V(1,1,4)
      write(*,*) 'V_exp(4) = ', V_expected(1,1,4)
      @assertequal(1.0_prec, V(1,1,4)/V_expected(1,1,4), toler, message='(pressure)')
      write(*,*) 'rel tol  = ', toler
      
    end subroutine cons2prim_test

end module test_cons2prim
